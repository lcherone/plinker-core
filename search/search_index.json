{
    "docs": [
        {
            "location": "/", 
            "text": "PlinkerRPC - Core\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlinkerRPC PHP client/server makes it really easy to link and execute generic PHP components on remote systems, while maintaining the feel of a local method call.\n\n\nDocs:\n \nhttps://plinker-rpc.github.io/development/core\n\n\nNew changes in version 3 include:\n\n\n\n\nNow compaible with \nPHP extension\n.\n\n\nBuilt-in core components and info method added so components can be discovered.\n\n\nOnly one client instance is now needed, made use of __get() to dynamically set component.\n\n\nUser defined components/classes, so you can call your own code.\n\n\nBoth request and response is encrypted and signed.\n\n\n\n\nInstall\n\n\nRequire this package with composer using the following command:\n\n\n$ composer require plinker/core\n\n\n\n\n\nAdditional Setup\n\n\nThis component does not require any additional setup.\n\n\nClient\n\n\nCreating a client instance is done as follows:\n\n\n?php\n\n\nrequire\n \nvendor/autoload.php\n;\n\n\n\n/**\n\n\n * Initialize plinker client.\n\n\n *\n\n\n * @param string $server - URL to server listener.\n\n\n * @param string $config - server secret, and/or a additional component data\n\n\n */\n\n\n$client\n \n=\n \nnew\n \n\\Plinker\\Core\\Client\n(\n\n    \nhttp://example.com/server.php\n,\n\n    \n[\n\n        \nsecret\n \n=\n \na secret password\n,\n\n    \n]\n\n\n);\n\n\n\n// or using global function\n\n\n$client\n \n=\n \nplinker_client\n(\nhttp://example.com/server.php\n,\n \na secret password\n);\n\n\n\n\n\n\nServer\n\n\nCreating a server listener is done as follows:\n\n\nOptional features:\n\n\n\n\nSet a secret, which all clients will require. \n\n\nLock down to specific client IP addresses for addtional security.\n\n\nDefine your own classes in the \nclasses\n array then access like above \n$client-\nclass-\nmethod()\n, which can interface out of scope components or composer packages.\n\n\nDefine addtional key values for database connections etc, or you could pass the parameters through the client connection.\n\n\n\n\n\n\n\n?php\n\n\nrequire\n \nvendor/autoload.php\n;\n\n\n\n/**\n\n\n * Initialize plinker server.\n\n\n */\n\n\nif\n \n(\nisset\n(\n$_SERVER\n[\nHTTP_PLINKER\n]))\n \n{\n\n    \n// init plinker server\n\n    \necho\n \n(\nnew\n \n\\Plinker\\Server\n([\n\n        \nsecret\n \n=\n \na secret password\n,\n\n        \nallowed_ips\n \n=\n \n[\n\n            \n127.0.0.1\n\n        \n],\n\n        \nclasses\n \n=\n \n[\n\n            \ntest\n \n=\n \n[\n\n                \n// path to file\n\n                \nclasses/test.php\n,\n\n                \n// addtional key/values\n\n                \n[\n\n                    \nkey\n \n=\n \nvalue\n\n                \n]\n\n            \n],\n\n            \n// you can use namespaced classes\n\n            \nFoo\\\\Demo\n \n=\n \n[\n\n                \n// path to file\n\n                \nsome_class/demo.php\n,\n\n                \n// addtional key/values\n\n                \n[\n\n                    \nkey\n \n=\n \nvalue\n\n                \n]\n\n            \n],\n\n            \n// ...\n\n        \n]\n\n    \n]))\n-\nlisten\n();\n\n\n}\n\n\n\n\n\n\nMethods\n\n\nOnce setup, you call the class though its namespace to its method.\n\n\nInfo\n\n\nThe info method returns defined endpoint methods and their parameters.\n\n\nCall\n\n\n$result = $client-\ninfo();\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [class] =\n Array\n        (\n            [Foo\\Demo] =\n Array\n                (\n                    [config] =\n Array\n                        (\n                            [key] =\n value\n                        )\n\n                    [methods] =\n Array\n                        (\n                            [config] =\n Array\n                                (\n                                )\n\n                            [this] =\n Array\n                                (\n                                )\n\n                            [test] =\n Array\n                                (\n                                    [0] =\n x\n                                    [1] =\n y\n                                )\n\n                        )\n\n                )\n\n        )\n\n)\n\n\n\n\n\nTesting\n\n\n$ composer \ntest\n\n\n\n\n\n\nContributing\n\n\nPlease see \nCONTRIBUTING\n for details.\n\n\nSecurity\n\n\nIf you discover any security related issues, please contact me via \nhttps://cherone.co.uk\n instead of using the issue tracker.\n\n\nCredits\n\n\n\n\nLawrence Cherone\n\n\nAll Contributors\n\n\n\n\nDevelopment Encouragement\n\n\nIf you use this code and make money from it and want to show your appreciation,\nplease feel free to make a donation \nhttps://www.paypal.me/lcherone\n, thanks.\n\n\nSponsors\n\n\nGet your company or name listed here.\n\n\nLicense\n\n\nThe MIT License (MIT). Please see \nLicense File\n for more information.\n\n\nSee \norganisations page\n for additional components.", 
            "title": "Home"
        }, 
        {
            "location": "/#plinkerrpc-core", 
            "text": "PlinkerRPC PHP client/server makes it really easy to link and execute generic PHP components on remote systems, while maintaining the feel of a local method call.  Docs:   https://plinker-rpc.github.io/development/core  New changes in version 3 include:   Now compaible with  PHP extension .  Built-in core components and info method added so components can be discovered.  Only one client instance is now needed, made use of __get() to dynamically set component.  User defined components/classes, so you can call your own code.  Both request and response is encrypted and signed.", 
            "title": "PlinkerRPC - Core"
        }, 
        {
            "location": "/#install", 
            "text": "Require this package with composer using the following command:  $ composer require plinker/core", 
            "title": "Install"
        }, 
        {
            "location": "/#additional-setup", 
            "text": "This component does not require any additional setup.", 
            "title": "Additional Setup"
        }, 
        {
            "location": "/#client", 
            "text": "Creating a client instance is done as follows:  ?php  require   vendor/autoload.php ;  /**   * Initialize plinker client.   *   * @param string $server - URL to server listener.   * @param string $config - server secret, and/or a additional component data   */  $client   =   new   \\Plinker\\Core\\Client ( \n     http://example.com/server.php , \n     [ \n         secret   =   a secret password , \n     ]  );  // or using global function  $client   =   plinker_client ( http://example.com/server.php ,   a secret password );", 
            "title": "Client"
        }, 
        {
            "location": "/#server", 
            "text": "Creating a server listener is done as follows:  Optional features:   Set a secret, which all clients will require.   Lock down to specific client IP addresses for addtional security.  Define your own classes in the  classes  array then access like above  $client- class- method() , which can interface out of scope components or composer packages.  Define addtional key values for database connections etc, or you could pass the parameters through the client connection.    ?php  require   vendor/autoload.php ;  /**   * Initialize plinker server.   */  if   ( isset ( $_SERVER [ HTTP_PLINKER ]))   { \n     // init plinker server \n     echo   ( new   \\Plinker\\Server ([ \n         secret   =   a secret password , \n         allowed_ips   =   [ \n             127.0.0.1 \n         ], \n         classes   =   [ \n             test   =   [ \n                 // path to file \n                 classes/test.php , \n                 // addtional key/values \n                 [ \n                     key   =   value \n                 ] \n             ], \n             // you can use namespaced classes \n             Foo\\\\Demo   =   [ \n                 // path to file \n                 some_class/demo.php , \n                 // addtional key/values \n                 [ \n                     key   =   value \n                 ] \n             ], \n             // ... \n         ] \n     ])) - listen ();  }", 
            "title": "Server"
        }, 
        {
            "location": "/#methods", 
            "text": "Once setup, you call the class though its namespace to its method.", 
            "title": "Methods"
        }, 
        {
            "location": "/#info", 
            "text": "The info method returns defined endpoint methods and their parameters.  Call  $result = $client- info();  Response  Array\n(\n    [class] =  Array\n        (\n            [Foo\\Demo] =  Array\n                (\n                    [config] =  Array\n                        (\n                            [key] =  value\n                        )\n\n                    [methods] =  Array\n                        (\n                            [config] =  Array\n                                (\n                                )\n\n                            [this] =  Array\n                                (\n                                )\n\n                            [test] =  Array\n                                (\n                                    [0] =  x\n                                    [1] =  y\n                                )\n\n                        )\n\n                )\n\n        )\n\n)", 
            "title": "Info"
        }, 
        {
            "location": "/#testing", 
            "text": "$ composer  test", 
            "title": "Testing"
        }, 
        {
            "location": "/#contributing", 
            "text": "Please see  CONTRIBUTING  for details.", 
            "title": "Contributing"
        }, 
        {
            "location": "/#security", 
            "text": "If you discover any security related issues, please contact me via  https://cherone.co.uk  instead of using the issue tracker.", 
            "title": "Security"
        }, 
        {
            "location": "/#credits", 
            "text": "Lawrence Cherone  All Contributors", 
            "title": "Credits"
        }, 
        {
            "location": "/#development-encouragement", 
            "text": "If you use this code and make money from it and want to show your appreciation,\nplease feel free to make a donation  https://www.paypal.me/lcherone , thanks.", 
            "title": "Development Encouragement"
        }, 
        {
            "location": "/#sponsors", 
            "text": "Get your company or name listed here.", 
            "title": "Sponsors"
        }, 
        {
            "location": "/#license", 
            "text": "The MIT License (MIT). Please see  License File  for more information.  See  organisations page  for additional components.", 
            "title": "License"
        }
    ]
}